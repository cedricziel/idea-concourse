{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Concourse CI Pipeline",
  "type": "object",
  "properties": {
    "display": {
      "$ref": "#/definitions/display_config"
    },
    "resource_types": {
      "title": "Concourse CI pipeline resource types",
      "description": "Each resource in a pipeline has a type. The resource's type determines what versions are detected, the bits that are fetched when the resource's get step runs, and the side effect that occurs when the resource's put step runs.\n\nConcourse comes with a few \"core\" resource types to cover common use cases like git and s3 - the rest are developed and supported by the Concourse community. An exhaustive list of all resource types is available in the Resource Types catalog.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/resource_type"
      }
    },
    "resources": {
      "title": "Concourse CI pipeline resources",
      "description": "Resources are the heart and soul of Concourse. They represent all external inputs to and outputs of jobs in the pipeline.\n\nEach resource represents a versioned artifact with an external source of truth. Configuring the same resource in any pipeline on any Concourse cluster will behave the exact same way. Concourse will continuously check each configured resource to discover new versions. These versions then flow through the pipeline via get steps configured on Jobs.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/resource"
      }
    },
    "groups": {
      "title": "A list of job groups to use for organizing jobs in the web UI.",
      "description": "Groups have no functional effect on your pipeline. They are purely for making it easier to grok large pipelines in the web UI.\n\nNote: once you have added groups to your pipeline, all jobs must be in a group.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/group_config"
      }
    },
    "jobs": {
      "title": "Concourse CI pipeline jobs",
      "description": "Jobs determine the actions of your pipeline. They determine how resources progress through it, and how the pipeline is visualized.\n\nThe most important attribute of a job is its build plan, configured as job.plan. This determines the sequence of Steps to execute in any builds of the job.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/job"
      }
    }
  },
  "definitions": {
    "display_config": {
      "title": "Visual configurations for personalizing your pipeline.",
      "type": "object",
      "properties": {
        "background_image": {
          "description": "Allow users to specify a custom background image which is put at 30% opacity, grayscaled and blended into existing background. Must be an http, https, or relative URL.",
          "type": "string"
        }
      }
    },
    "group_config": {
      "properties": {
        "name": {
          "title": "A unique name for the group.",
          "description": "This should be short and simple as it will be used as the tab name for navigation.",
          "$ref": "#/definitions/identifier"
        },
        "jobs": {
          "title": "A list of jobs that should appear in this group",
          "description": "A job may appear in multiple groups. Neighbours of jobs in the current group will also appear on the same page in order to give context of the location of the group in the pipeline.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/identifier"
          }
        }
      }
    },
    "job": {
      "type": "object",
      "required": [
        "name",
        "plan"
      ],
      "properties": {
        "name": {
          "description": "The name of the job. This should be short; it will show up in URLs.",
          "$ref": "#/definitions/identifier"
        },
        "plan": {
          "type": "array",
          "description": "The sequence of steps to execute.",
          "items": {
            "$ref": "#/definitions/step"
          }
        },
        "old_name": {
          "description": "The old name of the job. If configured, the history of old job will be inherited to the new one. Once the pipeline is set, this field can be removed as the builds have been transfered.",
          "$ref": "#/definitions/identifier"
        },
        "serial": {
          "type": "boolean",
          "description": "Default false. If set to true, builds will queue up and execute one-by-one, rather than executing in parallel."
        },
        "build_log_retention": {
          "type": "object",
          "description": "Configures the retention policy for build logs. This is useful if you have a job that runs often but after some amount of time the logs aren't worth keeping around.\n\nBuilds which are not retained by the configured policy will have their logs reaped. If this configuration is omitted, logs are kept forever.\n\n",
          "properties": {
            "builds": {
              "type": "number"
            },
            "days": {
              "type": "number"
            },
            "minimum_succeeded_builds": {
              "type": "number"
            }
          }
        },
        "build_logs_to_retain": {
          "type": "number",
          "deprecationMessage": "Deprecated. Equivalent to setting job.build_log_retention.builds."
        },
        "serial_groups": {
          "type": "array",
          "description": "Default []. When set to an array of arbitrary tag-like strings, builds of this job and other jobs referencing the same tags will be serialized.",
          "items": {
            "$ref": "#/definitions/identifier"
          }
        },
        "max_in_flight": {
          "type": "number",
          "description": "If set, specifies a maximum number of builds to run at a time. If serial or serial_groups are set, they take precedence and force this value to be 1."
        },
        "public": {
          "type": "boolean",
          "description": "Default false. If set to true, the build log of this job will be viewable by unauthenticated users.",
          "default": false
        },
        "disable_manual_trigger": {
          "type": "boolean",
          "description": "If set to true, manual triggering of the job (via the web UI or fly trigger-job) will be disabled.",
          "default": false
        },
        "interruptible": {
          "type": "boolean",
          "description": "If this value is set to true, the worker will not wait on the builds of this job.",
          "default": false
        },
        "on_success": {
          "$ref": "#/definitions/step",
          "description": "Step to execute when the job succeeds. Equivalent to the step.on_success hook."
        },
        "on_failure": {
          "$ref": "#/definitions/step",
          "description": "Step to execute when the job fails. Equivalent to the step.on_failure hook."
        },
        "on_error": {
          "$ref": "#/definitions/step",
          "description": "Step to execute when the job errors. Equivalent to the step.on_error hook."
        },
        "on_abort": {
          "$ref": "#/definitions/step",
          "description": "Step to execute when the job aborts. Equivalent to the step.on_abort hook."
        },
        "ensure": {
          "$ref": "#/definitions/step",
          "description": "Step to execute regardless of whether the job succeeds, fails, errors, or aborts. Equivalent to the step.ensure hook."
        }
      }
    },
    "resource_type": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/identifier",
          "description": "The name of the resource type."
        },
        "type": {
          "$ref": "#/definitions/identifier",
          "description": "The type of the resource used to provide the resource type's container image.",
          "enum": [
            "docker-image",
            "registry-image"
          ]
        },
        "source": {
          "$ref": "#/definitions/config",
          "description": "The configuration for the resource type's resource. This varies by resource type, and is a black box to Concourse; it is blindly passed to the resource at runtime."
        },
        "privileged": {
          "type": "boolean",
          "description": "If set to true, the resource's containers will be run with full capabilities, as determined by the worker backend the task runs on.",
          "default": false
        },
        "params": {
          "$ref": "#/definitions/config",
          "description": "Arbitrary config to pass when running the get to fetch the resource type's image."
        },
        "check_every": {
          "type": "string",
          "description": "The interval on which to check for new versions of the resource type. Acceptable interval options are defined by the time.ParseDuration function.",
          "default": "1m"
        },
        "tags": {
          "type": "array",
          "description": "A list of tags to determine which workers the checks will be performed on. You'll want to specify this if the source is internal to a worker's network, for example. See also step.tags.",
          "items": {
            "type": "string"
          }
        },
        "unique_version_history": {
          "type": "boolean",
          "description": "Only relevant when Global Resources is enabled. When set to true, resources using this resource type will have a version history that is unique to the resource, rather than sharing a global version history.",
          "default": false
        },
        "defaults": {
          "$ref": "#/definitions/config",
          "description": "The default configuration for the resource type. This varies by resource type, and is a black box to Concourse; it is merged with (duplicate fields are overwritten by) resource.source and passed to the resource at runtime."
        }
      },
      "additionalProperties": false
    },
    "resource": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/identifier",
          "description": "The name of the resource. This should be short and simple. This name will be referenced by build plans of jobs in the pipeline."
        },
        "type": {
          "$ref": "#/definitions/identifier",
          "description": "The resource type implementing the resource."
        },
        "source": {
          "$ref": "#/definitions/config",
          "description": "The configuration for the resource. This varies by resource type, and is a black box to Concourse; it is blindly passed to the resource at runtime."
        },
        "old_name": {
          "$ref": "#/definitions/identifier",
          "description": "The old name of the resource. If configured, the history of the old resource will be inherited to the new one. Once the pipeline is set, this field can be removed as the history has been transferred."
        },
        "icon": {
          "type": "string",
          "description": "The name of a Material Design icon to show next to the resource name in the web UI. For example, github."
        },
        "version": {
          "$ref": "#/definitions/version",
          "description": "A version to pin the resource to across the pipeline. This has the same effect as setting get step version on every get step referencing the resource."
        },
        "check_every": {
          "type": "string",
          "description": "The interval on which to check for new versions of the resource. Acceptable interval options are defined by the time.ParseDuration function.",
          "default": "1m"
        },
        "tags": {
          "type": "array",
          "description": "A list of tags to determine which workers the checks will be performed on. You'll want to specify this if the source is internal to a worker's network, for example. See also step.tags.",
          "items": {
            "type": "string"
          }
        },
        "public": {
          "type": "boolean",
          "description": "If set to true, the metadata for each version of the resource will be viewable by unauthenticated users (assuming the pipeline has been exposed).",
          "default": false
        },
        "webhook_token": {
          "type": "string",
          "description": "If specified, web hooks can be sent to trigger an immediate check of the resource, specifying this value as a primitive form of authentication via query params."
        }
      },
      "required": [
        "name",
        "type"
      ],
      "additionalProperties": false
    },
    "step": {
      "type": "object",
      "description": "Jobs determine the actions of your pipeline.",
      "additionalProperties": false,
      "allOf": [
        {
          "$ref": "#/definitions/default-step"
        },
        {
          "oneOf": [
            {
              "$ref": "#/definitions/get-step"
            },
            {
              "$ref": "#/definitions/put-step"
            },
            {
              "$ref": "#/definitions/set_pipeline-step"
            },
            {
              "$ref": "#/definitions/task-step"
            },
            {
              "$ref": "#/definitions/load_var-step"
            },
            {
              "$ref": "#/definitions/in_parallel-step"
            },
            {
              "$ref": "#/definitions/aggregate-step"
            },
            {
              "$ref": "#/definitions/do-step"
            },
            {
              "$ref": "#/definitions/try-step"
            }
          ]
        }
      ]
    },
    "aggregate-step": {
      "deprecationMessage": "Deprecated. Use `in_parallel` step instead.",
      "properties": {
        "aggregate": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/step"
          }
        }
      },
      "additionalProperties": false,
      "required": [
        "aggregate"
      ]
    },
    "do-step": {
      "properties": {
        "do": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/step"
          },
          "description": "Simply performs the given steps serially, with the same semantics as if they were at the top level step listing."
        }
      },
      "additionalProperties": false,
      "required": [
        "do"
      ]
    },
    "get-step": {
      "properties": {
        "get": {
          "$ref": "#/definitions/identifier",
          "description": "Fetches a version of a resource."
        },
        "params": {
          "$ref": "#/definitions/config",
          "description": "Arbitrary configuration to pass to the resource. Refer to the resource type's documentation to see what it supports."
        },
        "passed": {
          "type": "array",
          "description": "When specified, only the versions of the resource that made it through the given list of jobs (AND-ed together) will be considered when triggering and fetching.",
          "items": [
            {
              "type": "string"
            }
          ]
        },
        "resource": {
          "type": "string",
          "description": "The resource to fetch, as configured in pipeline.resources."
        },
        "trigger": {
          "type": "boolean",
          "description": "If set to true, new builds of the job will be automatically created when a new version for this input becomes available.",
          "default": false
        },
        "version": {
          "type": "string",
          "description": "The version of the resource to fetch."
        }
      },
      "required": [
        "get"
      ],
      "additionalProperties": false
    },
    "put-step": {
      "properties": {
        "params": {
          "description": "Arbitrary configuration to pass to the resource. Refer to the resource type's documentation to see what it supports.",
          "$ref": "#/definitions/config"
        },
        "put": {
          "$ref": "#/definitions/identifier",
          "description": "Pushes to the given resource."
        },
        "resource": {
          "type": "string",
          "description": "Defaults to the value of put. The resource to update, as configured in pipeline.resources."
        },
        "inputs": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "all",
                "detect"
              ]
            },
            {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ]
            }
          ]
        },
        "get_params": {
          "description": "Arbitrary configuration to get to the resource during the implicit get step. Refer to the resource type's documentation to see what it supports.",
          "$ref": "#/definitions/config"
        }
      },
      "required": [
        "put"
      ],
      "additionalProperties": false
    },
    "set_pipeline-step": {
      "properties": {
        "set_pipeline": {
          "$ref": "#/definitions/identifier",
          "description": "Configures a pipeline.\n\nThe identifier specifies the name of the pipeline to configure. Unless set_pipeline step team is set, it will be configured within the current team and be created unpaused. If set to self, the current pipeline will update its own config."
        },
        "file": {
          "$ref": "#/definitions/file-path",
          "description": "The path to the pipeline's configuration file."
        },
        "vars": {
          "type": "object",
          "description": "A map of template variables to pass to the pipeline config."
        },
        "var_files": {
          "type": "array",
          "description": "A list of paths to .yml files that will be passed to the pipeline config in the same manner as the --load-vars-from flag to fly set-pipeline. This means that if a variable appears in multiple files, the value from a file that is passed later in the list will override the values from files earlier in the list.",
          "items": {
            "$ref": "#/definitions/file-path"
          }
        },
        "team": {
          "$ref": "#/definitions/identifier",
          "description": "By default, the set_pipeline step sets the pipeline for the same team that is running the build.\n\nThe team attribute can be used to specify another team."
        }
      },
      "additionalProperties": false,
      "required": [
        "set_pipeline",
        "file"
      ]
    },
    "task-step": {
      "properties": {
        "task": {
          "$ref": "#/definitions/identifier",
          "description": "Executes a task."
        },
        "config": {
          "$ref": "#/definitions/task-config",
          "description": "The task config to execute."
        },
        "file": {
          "$ref": "#/definitions/file-path",
          "description": "A dynamic alternative to task step config.\n\nfile points at a .yml file containing the task config, which allows this to be tracked with your resources."
        },
        "image": {
          "$ref": "#/definitions/identifier",
          "description": "Specifies an artifact source containing an image to use for the task. This overrides any task.image_resource configuration present in the task configuration."
        },
        "privileged": {
          "type": "boolean",
          "description": "If set to true, the task will run with escalated capabilities available on the task's platform.",
          "default": false
        },
        "vars": {
          "type": "object",
          "description": "A map of template variables to pass to an external task. Not to be confused with task.params, which provides environment variables to the task.\n\nThis is to be used with external tasks defined in task step file."
        },
        "params": {
          "$ref": "#/definitions/env-vars",
          "description": "A map of task environment variable parameters to set, overriding those configured in the task's config or file."
        },
        "input_mapping": {
          "type": "object",
          "description": "A map from task input names to concrete names in the build plan. This allows a task with generic input names to be used multiple times in the same plan, mapping its inputs to specific resources within the plan."
        },
        "output_mapping": {
          "type": "object",
          "description": "A map from task output names to concrete names to register in the build plan. This allows a task with generic output names to be used multiple times in the same plan."
        }
      },
      "additionalProperties": false,
      "required": [
        "task"
      ]
    },
    "try-step": {
      "properties": {
        "try": {
          "$ref": "#/definitions/step",
          "description": "Performs the given step, ignoring any failure and masking it with success.\n\nThis can be used when you want to perform some side-effect, but you don't really want the whole build to fail if it doesn't work."
        }
      },
      "additionalProperties": false,
      "required": [
        "try"
      ]
    },
    "load_var-step": {
      "properties": {
        "load_var": {
          "$ref": "#/definitions/identifier",
          "description": "Load the value for a var at runtime, making it available to subsequent steps as a build-local var named after the given identifier."
        },
        "file": {
          "$ref": "#/definitions/file-path",
          "description": "The path to a file whose content shall be read and used as the var's value."
        },
        "format": {
          "type": "string",
          "description": "The format of the file's content.\n\nIf unset, Concourse will try to detect the format from the file extension. If the file format cannot be determined, Concourse will fallback to trim.",
          "enum": [
            "json",
            "yaml",
            "yml",
            "trim",
            "raw"
          ]
        },
        "reveal": {
          "type": "boolean",
          "description": "If set to true, allow the var's content to be printed in the build output even with secret redaction enabled."
        }
      },
      "additionalProperties": false,
      "required": [
        "load_var",
        "file"
      ]
    },
    "in_parallel-step": {
      "properties": {
        "in_parallel": {
          "oneOf": [
            {
              "type": "array",
              "description": "Performs the given steps in parallel.\n\nIf any sub-steps (or task) in a parallel result in a failure or error, the parallel step as a whole is considered to have failed or errored.",
              "items": {
                "$ref": "#/definitions/step"
              },
              "minItems": 1
            },
            {
              "$ref": "#/definitions/in_parallel_config"
            }
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "in_parallel"
      ]
    },
    "in_parallel_config": {
      "properties": {
        "steps": {
          "type": "array",
          "items": {
            "type": "object",
            "description": "Performs the given steps in parallel.\n\nIf any sub-steps (or task) in a parallel result in a failure or error, the parallel step as a whole is considered to have failed or errored.",
            "$ref": "#/definitions/step"
          }
        },
        "limit": {
          "type": "number",
          "description": "A sempahore which limits the parallelism when executing the steps in a in_parallel step. When set, the number of running steps will not exceed the limit."
        },
        "fail_fast": {
          "type": "boolean",
          "description": "When enabled the parallel step will fail fast by returning as soon as any sub-step fails. This means that running steps will be interrupted and pending steps will no longer be scheduled.",
          "default": false
        }
      },
      "additionalProperties": false,
      "required": [
        "steps"
      ]
    },
    "default-step": {
      "properties": {
        "timeout": {
          "type": "string",
          "description": "The amount of time to limit the step's execution to, e.g. 30m for 30 minutes."
        },
        "attempts": {
          "type": "number",
          "description": "The total number of times a step should be tried before it should fail"
        },
        "tags": {
          "type": "array",
          "description": "The tags by which to match workers.",
          "items": {
            "type": "string"
          }
        },
        "on_success": {
          "$ref": "#/definitions/step",
          "description": "A hook step to execute if the parent step succeeds."
        },
        "on_failure": {
          "$ref": "#/definitions/step",
          "description": "A hook step to execute if the parent step fails.\n\nThis does not \"recover\" the failure - it will still fail even if the hook step succeeds."
        },
        "on_abort": {
          "$ref": "#/definitions/step",
          "description": "A hook step to execute if the build is aborted and the parent step is terminated."
        },
        "on_error": {
          "$ref": "#/definitions/step",
          "description": "A hook step to execute after the parent step if the parent step terminates abnormally in any way other than those handled by the step.on_abort or step.on_failure. This covers scenarios as broad as configuration mistakes, temporary network issues with the workers, or running longer than a step.timeout."
        },
        "ensure": {
          "$ref": "#/definitions/step",
          "description": "A hook step to execute after the parent step regardless of whether the parent step succeeds, fails, or errors. The step will also be executed if the build was aborted and its parent step was interrupted.\n\nIf the parent step succeeds and the ensured step fails, the overall step fails."
        }
      }
    },
    "task-config": {
      "type": "object",
      "properties": {
        "platform": {
          "description": "The platform the task should run on. This determines the pool of workers that the task can run against.",
          "$ref": "#/definitions/platform_type"
        },
        "image_resource": {
          "description": "The container image to run with, as provided by an anonymous resource definition",
          "$ref": "#/definitions/anonymous_resource"
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/input"
          }
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/output"
          }
        },
        "caches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cache"
          }
        },
        "params": {
          "$ref": "#/definitions/env-vars"
        },
        "run": {
          "$ref": "#/definitions/command"
        },
        "rootfs_uri": {
          "type": "string"
        },
        "container_limits": {
          "$ref": "#/definitions/container_limits"
        }
      },
      "additionalProperties": false,
      "required": [
        "platform",
        "image_resource",
        "run"
      ]
    },
    "platform_type": {
      "type": "string",
      "enum": [
        "linux",
        "darwin",
        "windows"
      ]
    },
    "anonymous_resource": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/resource_type_name"
        },
        "source": {
          "$ref": "#/definitions/config"
        },
        "params": {
          "$ref": "#/definitions/config"
        },
        "version": {
          "$ref": "#/definitions/version"
        }
      },
      "additionalProperties": false,
      "required": [
        "type",
        "source"
      ]
    },
    "resource_type_name": {
      "type": "string",
      "enum": [
        "registry-image",
        "docker-image",
        "git"
      ]
    },
    "config": {
      "type": "object",
      "propertyNames": {
        "pattern": "^[A-Za-z_][A-Za-z0-9_]*$"
      }
    },
    "version": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "input": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/identifier"
        },
        "path": {
          "$ref": "#/definitions/dir-path"
        },
        "optional": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "required": [
        "name"
      ]
    },
    "output": {
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/identifier"
        },
        "path": {
          "$ref": "#/definitions/dir-path"
        }
      },
      "additionalProperties": false,
      "required": [
        "name"
      ]
    },
    "cache": {
      "type": "object",
      "properties": {
        "path": {
          "$ref": "#/definitions/dir-path"
        }
      },
      "additionalProperties": false,
      "required": [
        "path"
      ]
    },
    "env-vars": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "command": {
      "type": "object",
      "properties": {
        "path": {
          "$ref": "#/definitions/file-path"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dir": {
          "$ref": "#/definitions/dir-path"
        },
        "user": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "required": [
        "path"
      ]
    },
    "identifier": {
      "type": "string",
      "pattern": "^[a-z].*$"
    },
    "dir-path": {
      "type": "string"
    },
    "file-path": {
      "type": "string"
    },
    "container_limits": {
      "type": "object",
      "properties": {
        "cpu": {
          "type": "number",
          "minimum": 0
        },
        "memory": {
          "type": "number",
          "minimum": 0
        }
      },
      "additionalProperties": false
    }
  }
}
